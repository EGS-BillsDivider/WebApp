# Create nginx service
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service-pabreu
  namespace: egs1
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx-service-pabreu

# Database Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pabreu-secrets
  namespace: egs1
type: Opaque
data:
  db_password: cm9vdA==

# Create persistence claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: webapp-pvc-claim
  namespace: egs1
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 500Mi
# Create database deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-pabreu
  namespace: egs1
spec:
  selector:
    matchLabels:
      app: mysql-pabreu
  template:
    metadata:
      labels:
        app: mysql-pabreu
    spec:
      containers:
      - name: mysql-pabreu
        image: registry.deti:5000/mysql-pabreu:19062022
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pabreu-secrets
              key: db_password
        ports:
        - containerPort: 3306
          name: mysql-pabreu
        volumeMounts:
          - name: mysql-persistent-storage
            mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: webapp-pvc-claim

# Create app deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: egs1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
      - name: app
        image: registry.deti:5000/app-pabreu:v49
        ports:
        - containerPort: 8000
          name: app
        volumeMounts:
        - name: app-pabreu-secret
          mountPath: "/tmp/secrets"
          readOnly: true
      volumes:
      - name: app-pabreu-secret
        secret:
          secretName: app-pabreu-secret
          

# Create nginx deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-pabreu
  namespace: egs1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-pabreu
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx-pabreu
    spec:
      containers:
        - image: registry.deti:5000/nginx-pabreu:v60
          name: nginx-pabreu
          ports:
            - containerPort: 80
          resources: {}
      restartPolicy: Always

# Creat database service
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-pabreu
  namespace: egs1
spec:
  ports:
  - port: 3306
    protocol: TCP
    name: mysql-pabreu
  selector:
    app: mysql-pabreu
  type: NodePort

# Create app service
---
apiVersion: v1
kind: Service
metadata:
  name: app
  namespace: egs1
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: app


# Configure Traefik ingress for nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: billsdivider-webapp
  namespace: egs1
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: billsdivider.egs
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service-pabreu
            port: 
              number: 80